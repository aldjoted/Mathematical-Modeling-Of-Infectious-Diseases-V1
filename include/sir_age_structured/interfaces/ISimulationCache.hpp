#ifndef I_SIMULATION_CACHE_HPP
#define I_SIMULATION_CACHE_HPP

#include <Eigen/Dense>
#include <string>
#include <optional>

namespace epidemic {

/**
 * @brief Interface for caching results based on parameter vectors.
 */
class ISimulationCache {
public:
    virtual ~ISimulationCache() = default;

    /**
     * @brief Try to retrieve a cached result for the given parameters.
     * @param parameters The parameter vector used for the simulation.
     * @return std::optional<double> The cached objective value, or std::nullopt if not found.
     */
    virtual std::optional<double> get(const Eigen::VectorXd& parameters) = 0;

    /**
     * @brief Store a result in the cache.
     * @param parameters The parameter vector used for the simulation.
     * @param result The objective value to cache.
     */
    virtual void set(const Eigen::VectorXd& parameters, double result) = 0;

    /**
     * @brief Clear the cache.
     */
    virtual void clear() = 0;

    /**
     * @brief Get the current size of the cache.
     * @return size_t
     */
    virtual size_t size() const = 0;
    /**
     * @brief Creates a unique string key based on the input parameters.
     * @param parameters The parameter vector used for the simulation.
     * @return A string representing the cache key.
     */
    virtual std::string createCacheKey(const Eigen::VectorXd& parameters) const = 0;
    /**
     * @brief Attempts to retrieve a cached likelihood value.
     * @param key The cache key generated by createCacheKey.
     * @param value Output parameter to store the cached likelihood if found.
     * @return True if the value was found in the cache, false otherwise.
     */
    virtual bool getLikelihood(const std::string& key, double& value) = 0;

    /**
     * @brief Stores a calculated likelihood value in the cache.
     * @param key The cache key generated by createCacheKey.
     * @param value The likelihood value to store.
     */
    virtual void storeLikelihood(const std::string& key, double value) = 0;

};

} // namespace epidemic

#endif // I_SIMULATION_CACHE_HPP
